class GameOverScene extends Phaser.Scene {
    constructor() {
        super('GameOverScene');
    }

    init(data) {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–±—Ä–∞–Ω–Ω—ã–π —Å—á–µ—Ç –∏ –≤—Ä–µ–º—è –∏–∑ GameScene
        this.score = data.score || 0;
        this.gameTime = data.gameTime || 0;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥
        if (this.score > 0) {
            this.saveScore();
        }
    }

    create() {
        // –§–æ–Ω
        this.add.image(400, 300, 'background');
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞"
        this.add.text(400, 120, '–ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê', {
            fontFamily: 'unutterable',
            fontSize: '58px',
            color: '#ff0000',
            align: 'center',
            stroke: '#000000',
            strokeThickness: 6
        }).setOrigin(0.5);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—á–µ—Ç
        this.add.text(400, 200, `–ü—Ä–µ–¥–µ–ª —Ç–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: ${this.score}`, {
            fontFamily: 'unutterable',
            fontSize: '32px',
            color: '#ffffff',
            align: 'center',
            stroke: '#000000',
            strokeThickness: 4
        }).setOrigin(0.5);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
        this.add.text(400, 240, `–í—Ä–µ–º—è: ${this.formatTime(this.gameTime)}`, {
            fontFamily: 'unutterable',
            fontSize: '28px',
            color: '#88ffff',
            align: 'center',
            stroke: '#000000',
            strokeThickness: 4
        }).setOrigin(0.5);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–≥—Ä–æ–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ
        const nickname = this.getCookie('playerNickname') || '–ê–Ω–æ–Ω–∏–º';
        const playerY = 280; // –ü–æ–∑–∏—Ü–∏—è –¥–ª—è –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–∏
        let scores = [];
        const leaderboardData = localStorage.getItem('jumpGameLeaderboard');
        if (leaderboardData) {
            scores = JSON.parse(leaderboardData);
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∫–æ—Ä–¥–µ
        let showRecordMessage = false;
        let recordMessage = '';
        let recordY = 320; // –ü–æ–∑–∏—Ü–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–µ–∫–æ—Ä–¥–µ
        
        if (scores.length > 0) {
            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            const position = scores.findIndex(score => 
                score.name === nickname && score.score === this.score);
            
            if (position >= 0) {
                showRecordMessage = true;
                if (position === 0) {
                    recordMessage = '–ù–û–í–´–ô –†–ï–ö–û–†–î! üèÜ';
                } else {
                    recordMessage = `–ü–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: ${position + 1}`;
                }
            }
        }
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–º—è –∏–≥—Ä–æ–∫–∞
        this.add.text(400, playerY, `–ò–≥—Ä–æ–∫: ${nickname}`, {
            fontFamily: 'unutterable',
            fontSize: '24px',
            color: '#ffff88',
            align: 'center',
            stroke: '#000000',
            strokeThickness: 3
        }).setOrigin(0.5);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∫–æ—Ä–¥–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (showRecordMessage) {
            this.add.text(400, recordY, recordMessage, {
                fontFamily: 'unutterable',
                fontSize: recordMessage.includes('–ù–û–í–´–ô –†–ï–ö–û–†–î') ? '32px' : '24px',
                color: recordMessage.includes('–ù–û–í–´–ô –†–ï–ö–û–†–î') ? '#ffff00' : '#aaaaff',
                align: 'center',
                stroke: '#000000',
                strokeThickness: 4
            }).setOrigin(0.5);
        }
        
        // –ö–Ω–æ–ø–∫–∏ - —Å–º–µ—â–∞–µ–º –∏—Ö –≤–Ω–∏–∑, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∫–æ—Ä–¥–µ
        const buttonsStartY = showRecordMessage ? 380 : 350;
        
        // –ö–Ω–æ–ø–∫–∞ "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞"
        const playAgainButton = this.add.text(400, buttonsStartY, '–Ø –ú–û–ì–£ –ë–û–õ–¨–®–ï!', {
            fontFamily: 'unutterable',
            fontSize: '24px',
            color: '#ffffff',
            backgroundColor: '#338833',
            align: 'center',
            stroke: '#000000',
            strokeThickness: 4,
            padding: {
                x: 20,
                y: 10
            }
        }).setOrigin(0.5).setInteractive();
        
        // –ö–Ω–æ–ø–∫–∞ "–õ–∏–¥–µ—Ä–±–æ—Ä–¥"
        const leaderboardButton = this.add.text(400, buttonsStartY + 60, '–ü–û–°–ú–û–¢–†–ï–¢–¨ –†–ï–ö–û–†–î–´', {
            fontFamily: 'unutterable',
            fontSize: '24px',
            color: '#ffffff',
            backgroundColor: '#883388',
            align: 'center',
            stroke: '#000000',
            strokeThickness: 4,
            padding: {
                x: 20,
                y: 10
            }
        }).setOrigin(0.5).setInteractive();
        
        // –ö–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        const menuButton = this.add.text(400, buttonsStartY + 120, '–Ø –Ω–µ –º–æ–≥—É –±–æ–ª—å—à–µ :(', {
            fontFamily: 'unutterable',
            fontSize: '24px',
            color: '#ffffff',
            backgroundColor: '#666666',
            align: 'center',
            stroke: '#000000',
            strokeThickness: 4,
            padding: {
                x: 20,
                y: 10
            }
        }).setOrigin(0.5).setInteractive();
        
        // –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        playAgainButton.on('pointerover', () => {
            playAgainButton.setStyle({ color: '#ffff00', backgroundColor: '#33aa33' });
        });
        
        playAgainButton.on('pointerout', () => {
            playAgainButton.setStyle({ color: '#ffffff', backgroundColor: '#338833' });
        });
        
        leaderboardButton.on('pointerover', () => {
            leaderboardButton.setStyle({ color: '#ffff00', backgroundColor: '#aa33aa' });
        });
        
        leaderboardButton.on('pointerout', () => {
            leaderboardButton.setStyle({ color: '#ffffff', backgroundColor: '#883388' });
        });
        
        menuButton.on('pointerover', () => {
            menuButton.setStyle({ color: '#ffff00', backgroundColor: '#888888' });
        });
        
        menuButton.on('pointerout', () => {
            menuButton.setStyle({ color: '#ffffff', backgroundColor: '#666666' });
        });
        
        // –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
        playAgainButton.on('pointerdown', () => {
            playAgainButton.setStyle({ color: '#ff8800' });
            this.scene.start('CharacterSelectScene');
        });
        
        leaderboardButton.on('pointerdown', () => {
            leaderboardButton.setStyle({ color: '#ff8800' });
            this.scene.start('LeaderboardScene', { score: this.score, gameTime: this.gameTime });
        });
        
        menuButton.on('pointerdown', () => {
            menuButton.setStyle({ color: '#ff8800' });
            this.scene.start('StartScene');
        });
    }
    
    saveScore() {
        const nickname = this.getCookie('playerNickname') || '–ê–Ω–æ–Ω–∏–º';
        
        // –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        if (typeof leaderboardService !== 'undefined') {
            try {
                // –ö–ª—é—á–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                const publicKey = '680ed22b8f40bb18ac70df27';
                const privateKey = 'WJRxP_ErZ0uLBvmSL6uXBgdwIykOMp6kmqlN69KlSiuA';
                const useHttps = true;
                
                console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞...');
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
                leaderboardService.initialize(publicKey, privateKey, useHttps);
                
                // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è, –¥–æ–±–∞–≤–ª—è—è –≤—Ä–µ–º—è –∫ –Ω–∏–∫–Ω–µ–π–º—É
                const uniqueName = `${nickname}`;
                
                const scoreData = {
                    name: uniqueName,
                    points: this.score,
                    seconds: Math.floor(this.gameTime), // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥
                    text: nickname // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º –≤ –ø–æ–ª–µ text
                };
                
                console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥:', scoreData);
                console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:', Math.floor(this.gameTime));
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ 
                const format = leaderboardService.ScoreFormat && leaderboardService.ScoreFormat.Object ? 
                    leaderboardService.ScoreFormat.Object : 'object';
                
                const sortOrder = leaderboardService.SortOrder && leaderboardService.SortOrder.PointsDescending ? 
                    leaderboardService.SortOrder.PointsDescending : 'points_desc';
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á—ë—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                leaderboardService.addScore(
                    scoreData, 
                    format, 
                    sortOrder, 
                    true
                )
                .then(scores => {
                    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥');
                    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –æ—Ç–≤–µ—Ç–µ:', scores.length);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞—à–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å
                    if (scores && scores.length > 0) {
                        const ourScore = scores.find(s => s.name === uniqueName);
                        if (ourScore) {
                            console.log('–ù–∞—à–∞ –∑–∞–ø–∏—Å—å –≤ –æ—Ç–≤–µ—Ç–µ:', ourScore);
                            console.log('–í—Ä–µ–º—è –≤ –æ—Ç–≤–µ—Ç–µ (seconds):', ourScore.seconds);
                        }
                    }
                })
                .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥:', error);
                    console.error('–ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', error.message);
                });
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –≤ GameOverScene:', e);
            }
        } else {
            console.error('–°–µ—Ä–≤–∏—Å –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
        }
    }
    
    getCookie(name) {
        const nameEQ = name + '=';
        const ca = document.cookie.split(';');
        for (let i = 0; i < ca.length; i++) {
            let c = ca[i];
            while (c.charAt(0) === ' ') c = c.substring(1, c.length);
            if (c.indexOf(nameEQ) === 0) return decodeURIComponent(c.substring(nameEQ.length, c.length));
        }
        return null;
    }

    formatTime(seconds) {
        const minutes = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        
        return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }
} 