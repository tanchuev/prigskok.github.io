class GameOverScene extends Phaser.Scene {
    constructor() {
        super('GameOverScene');
    }

    init(data) {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–±—Ä–∞–Ω–Ω—ã–π —Å—á–µ—Ç –∏–∑ GameScene
        this.score = data.score || 0;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥
        if (this.score > 0) {
            this.saveScore();
        }
    }

    create() {
        // –§–æ–Ω
        this.add.image(400, 300, 'background');
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞"
        this.add.text(400, 120, '–ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê', {
            fontFamily: 'unutterable',
            fontSize: '58px',
            color: '#ff0000',
            align: 'center',
            stroke: '#000000',
            strokeThickness: 6
        }).setOrigin(0.5);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—á–µ—Ç
        this.add.text(400, 200, `–ü—Ä–µ–¥–µ–ª —Ç–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: ${this.score}`, {
            fontFamily: 'unutterable',
            fontSize: '32px',
            color: '#ffffff',
            align: 'center',
            stroke: '#000000',
            strokeThickness: 4
        }).setOrigin(0.5);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–≥—Ä–æ–∫–∞
        const nickname = this.getCookie('playerNickname') || '–ê–Ω–æ–Ω–∏–º';
        this.add.text(400, 250, `–ò–≥—Ä–æ–∫: ${nickname}`, {
            fontFamily: 'unutterable',
            fontSize: '24px',
            color: '#ffff88',
            align: 'center',
            stroke: '#000000',
            strokeThickness: 3
        }).setOrigin(0.5);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ
        this.showLeaderboardPosition();
        
        // –ö–Ω–æ–ø–∫–∞ "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞"
        const playAgainButton = this.add.text(400, 350, '–Ø –ú–û–ì–£ –ë–û–õ–¨–®–ï!', {
            fontFamily: 'unutterable',
            fontSize: '24px',
            color: '#ffffff',
            backgroundColor: '#338833',
            align: 'center',
            stroke: '#000000',
            strokeThickness: 4,
            padding: {
                x: 20,
                y: 10
            }
        }).setOrigin(0.5).setInteractive();
        
        // –ö–Ω–æ–ø–∫–∞ "–õ–∏–¥–µ—Ä–±–æ—Ä–¥"
        const leaderboardButton = this.add.text(400, 410, '–ü–û–°–ú–û–¢–†–ï–¢–¨ –†–ï–ö–û–†–î–´', {
            fontFamily: 'unutterable',
            fontSize: '24px',
            color: '#ffffff',
            backgroundColor: '#883388',
            align: 'center',
            stroke: '#000000',
            strokeThickness: 4,
            padding: {
                x: 20,
                y: 10
            }
        }).setOrigin(0.5).setInteractive();
        
        // –ö–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        const menuButton = this.add.text(400, 470, '–Ø –Ω–µ –º–æ–≥—É –±–æ–ª—å—à–µ :(', {
            fontFamily: 'unutterable',
            fontSize: '24px',
            color: '#ffffff',
            backgroundColor: '#666666',
            align: 'center',
            stroke: '#000000',
            strokeThickness: 4,
            padding: {
                x: 20,
                y: 10
            }
        }).setOrigin(0.5).setInteractive();
        
        // –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        playAgainButton.on('pointerover', () => {
            playAgainButton.setStyle({ color: '#ffff00', backgroundColor: '#33aa33' });
        });
        
        playAgainButton.on('pointerout', () => {
            playAgainButton.setStyle({ color: '#ffffff', backgroundColor: '#338833' });
        });
        
        leaderboardButton.on('pointerover', () => {
            leaderboardButton.setStyle({ color: '#ffff00', backgroundColor: '#aa33aa' });
        });
        
        leaderboardButton.on('pointerout', () => {
            leaderboardButton.setStyle({ color: '#ffffff', backgroundColor: '#883388' });
        });
        
        menuButton.on('pointerover', () => {
            menuButton.setStyle({ color: '#ffff00', backgroundColor: '#888888' });
        });
        
        menuButton.on('pointerout', () => {
            menuButton.setStyle({ color: '#ffffff', backgroundColor: '#666666' });
        });
        
        // –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
        playAgainButton.on('pointerdown', () => {
            playAgainButton.setStyle({ color: '#ff8800' });
            this.scene.start('CharacterSelectScene');
        });
        
        leaderboardButton.on('pointerdown', () => {
            leaderboardButton.setStyle({ color: '#ff8800' });
            this.scene.start('LeaderboardScene');
        });
        
        menuButton.on('pointerdown', () => {
            menuButton.setStyle({ color: '#ff8800' });
            this.scene.start('StartScene');
        });
    }
    
    saveScore() {
        const nickname = this.getCookie('playerNickname') || '–ê–Ω–æ–Ω–∏–º';
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥
        let scores = [];
        const leaderboardData = localStorage.getItem('jumpGameLeaderboard');
        if (leaderboardData) {
            scores = JSON.parse(leaderboardData);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        scores.push({
            name: nickname,
            score: this.score,
            date: new Date().toLocaleDateString()
        });
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
        scores.sort((a, b) => b.score - a.score);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 20 –ª—É—á—à–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        if (scores.length > 20) {
            scores = scores.slice(0, 20);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        localStorage.setItem('jumpGameLeaderboard', JSON.stringify(scores));
    }
    
    showLeaderboardPosition() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥
        let scores = [];
        const leaderboardData = localStorage.getItem('jumpGameLeaderboard');
        if (leaderboardData) {
            scores = JSON.parse(leaderboardData);
        }
        
        if (scores.length === 0) return;
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const nickname = this.getCookie('playerNickname') || '–ê–Ω–æ–Ω–∏–º';
        const position = scores.findIndex(score => 
            score.name === nickname && score.score === this.score);
        
        if (position >= 0) {
            let message = '';
            if (position === 0) {
                message = '–ù–û–í–´–ô –†–ï–ö–û–†–î! üèÜ';
            } else {
                message = `–ü–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: ${position + 1}`;
            }
            
            this.add.text(400, 300, message, {
                fontFamily: 'unutterable',
                fontSize: position === 0 ? '32px' : '24px',
                color: position === 0 ? '#ffff00' : '#aaaaff',
                align: 'center',
                stroke: '#000000',
                strokeThickness: 4
            }).setOrigin(0.5);
        }
    }
    
    getCookie(name) {
        const nameEQ = name + '=';
        const ca = document.cookie.split(';');
        for (let i = 0; i < ca.length; i++) {
            let c = ca[i];
            while (c.charAt(0) === ' ') c = c.substring(1, c.length);
            if (c.indexOf(nameEQ) === 0) return decodeURIComponent(c.substring(nameEQ.length, c.length));
        }
        return null;
    }
} 